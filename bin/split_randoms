#!/usr/bin/env python

import os, sys
import numpy as np
import fitsio
from time import time
start = time()
import fitsio

from desiutil.log import get_logger
log = get_logger()

from argparse import ArgumentParser
ap = ArgumentParser(description='Split a random catalog into N smaller catalogs. Shuffle the random catalog first to ensure randomness.')
ap.add_argument("randomcat",
                help='A random catalog (e.g /project/projectdirs/desi/target/catalogs/randoms-dr4-0.20.0.fits). For an input catalog /X/X.fits N smaller catalogs will be written to /X/X-[1:N].fits')
ap.add_argument("-n", "--nchunks", type=int,
                help='Number of smaller catalog to split the random catalog into. Defaults to [10].',
                default="10")

ns = ap.parse_args()

if not os.path.exists(ns.randomcat):
    log.critical('Input directory does not exist: {}'.format(ns.randomcat))
    sys.exit(1)

log.info("Read in randoms from {} and split into {} catalogs...t = {:.1f}s"
         .format(ns.randomcat, ns.nchunks, time()-start))
rands, hdr = fitsio.read(ns.randomcat, header=True)
nrands = len(rands)

# ADM shuffle to ensure randomness.
log.info("Read in {:.1e} randoms. Shuffling indexes...t = {:.1f}s"
         .format(nrands, time()-start))
indexes = np.arange(nrands)
np.random.seed(626)
np.random.shuffle(indexes)

#ADM write in chunks to save memory.
chunk = nrands//ns.nchunks
# ADM remember that the density has effectively gone down.
hdr["DENSITY"] //= ns.nchunks

#ADM write out smaller files one-by-one.
for i in range(ns.nchunks):
    #ADM open the file for writing.
    outfile = "{}-{}.fits".format(os.path.splitext(ns.randomcat)[0], i+1)
    log.info("Writing chunk {} from index {} to {}...t = {:.1f}s"
             .format(i+1, i*chunk, (i+1)*chunk, time()-start))
    fitsio.write(outfile, rands[indexes[i*chunk:(i+1)*chunk]], extname='RANDOMS', header=hdr, clobber=True)

print("Done...t = {:.1f}s".format(time()-start))


