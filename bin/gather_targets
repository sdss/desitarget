#!/usr/bin/env python

from __future__ import print_function, division

import fitsio
from fitsio import FITS
import numpy as np

from time import time
start = time()

#import warnings
#warnings.simplefilter('error')

from desiutil.log import get_logger
log = get_logger()

from argparse import ArgumentParser
ap = ArgumentParser(description='Concatenate multiple FITS files into one large file. Retains the header from the FIRST listed input file')
ap.add_argument("infiles", 
                help="SEMI-COLON separated list of input files, which may have to be enclosed by quotes (e.g. 'file1;file2;file3;file4')")
ap.add_argument("outfile", 
                help="Output file name")
ap.add_argument("targtype", choices=['skies', 'randoms', 'targets', 'gfas'],
                help="Type of target run with parallelization/multiprocessing code to gather")

ns = ap.parse_args()

# ADM the gfas are actually called 'gfa_targets'
tt = ns.targtype
if ns.targtype == 'gfas':
    tt = "GFA_TARGETS"

# ADM convert passed csv strings to lists.
fns = [ fn for fn in ns.infiles.split(';') ]

# ADM read the header from the first file.
fx = fitsio.FITS(fns[0])
hdr = fx[1].read_header()

log.info('Begin writing {} to {}...t = {:.1f}s'
         .format(ns.targtype, ns.outfile, time()-start))

# ADM open the file for writing.
fits = FITS(ns.outfile, 'rw')

# ADM write the first file with the header.
data = fitsio.read(fns[0])
log.info('Working on file {}...t = {:.1f}s'.format(fns[0], time()-start))
fits.write(data, extname=tt.upper(), header=hdr, clobber=True)

# ADM add the other files.
for fn in fns[1:]:
    log.info('Working on file {}...t = {:.1f}s'.format(fn, time()-start))
    data = fitsio.read(fn)
    fits[-1].append(data)

fits.close()

log.info('Finished writing...t = {:.1f}s'.format(time()-start))
