#!/usr/bin/env python

import sys
import numpy as np
import argparse
from desitarget.gfa import select_gfas
from desitarget import io
from time import time
time0 = time()

from desiutil.log import get_logger
log = get_logger()

import multiprocessing
nproc = multiprocessing.cpu_count() // 2
nside = 64 #ADM default HEALPix Nside used throughout desitarget

from argparse import ArgumentParser
ap = ArgumentParser(description='Generates a file of GFA (Guide/Focus/Alignment) targets via matching to Gaia')
ap.add_argument("surveydir", 
                help="Base directory for a Legacy Surveys Data Release (e.g. '/global/project/projectdirs/cosmo/data/legacysurvey/dr6/' at NERSC)")
ap.add_argument("dest", 
                help="Output GFA targets file (e.g. '/project/projectdirs/desi/target/catalogs/gfas-dr6-0.20.0.fits' at NERSC)")
ap.add_argument('-g', '--gaiadir',
                help="Base directory for chunked Gaia files (defaults to ['project/projectdirs/cosmo/work/gaia/chunks-gaia-dr2-astrom'] for NERSC)",
                default='/project/projectdirs/cosmo/work/gaia/chunks-gaia-dr2-astrom')
ap.add_argument('-m', '--maglim', type=float, 
                help='Magnitude limit on GFA trgets in Gaia G-band (defaults to [18])',
                default=18)
ap.add_argument('-n', "--numproc", type=int,
                help='number of concurrent processes to use (defaults to [{}])'.format(nproc),
                default=nproc)
ns = ap.parse_args()

infiles = io.list_sweepfiles(ns.surveydir)
if len(infiles) == 0:
    infiles = io.list_tractorfiles(ns.surveydir)
if len(infiles) == 0:
    log.critical('no sweep or tractor files found')
    sys.exit(1)

log.info('running on {} processors...t={:.1f}mins'.format(ns.numproc, (time()-time0)/60.))

gfas = select_gfas(infiles, maglim=ns.maglim, numproc=ns.numproc, gaiadir=ns.gaiadir)

io.write_gfas(ns.dest, gfas, indir=ns.surveydir, nside=nside)

log.info('{} GFAs written to {}...t={:.1f}mins'.format(len(gfas), ns.dest, (time()-time0)/60.))

